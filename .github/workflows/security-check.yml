name: Secrets Scanner

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  secrets-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Scan for forbidden files
      run: |
        echo "üîç Scanning for forbidden file patterns..."
        
        # Check for environment files (allow templates and examples)
        FOUND_ENV_FILES=$(find . -name "*.env*" -not -path "./.git/*" \
            -not -name ".env.example" \
            -not -name ".env.local.template" \
            -not -name "*.env.template" \
            -not -name "*.env.example")
        
        if [ -n "$FOUND_ENV_FILES" ]; then
          echo "‚ùå Environment files detected - these should never be committed"
          echo "   Found: $FOUND_ENV_FILES"
          echo "   Allowed: .env.example, .env.local.template, *.env.template, *.env.example"
          exit 1
        fi
        
        # Check for Google service files
        FOUND_GOOGLE_FILES=$(find . -name "GoogleService-Info.plist" -not -path "./.git/*")
        if [ -n "$FOUND_GOOGLE_FILES" ]; then
          echo "‚ùå GoogleService-Info.plist detected - contains OAuth secrets"
          echo "   Found: $FOUND_GOOGLE_FILES"
          exit 1
        fi
        
        # Check for other sensitive files
        FOUND_SENSITIVE_FILES=$(find . \( -name "secrets.*" -o -name "credentials.*" -o -name "*.key" \) -not -path "./.git/*")
        if [ -n "$FOUND_SENSITIVE_FILES" ]; then
          echo "‚ùå Sensitive files detected"
          echo "   Found: $FOUND_SENSITIVE_FILES"
          exit 1
        fi
        
        echo "‚úÖ No forbidden files found"
    
    - name: Scan for API keys and secrets
      run: |
        echo "üîç Scanning file contents for API keys and secrets..."
        
        # Define patterns for common API keys
        PATTERNS=(
          "AIzaSy[A-Za-z0-9_-]{33}"                    # Google API keys
          "ya29\.[A-Za-z0-9_-]+"                      # Google OAuth tokens
          "sk-[A-Za-z0-9]{48}"                        # OpenAI API keys
          "xoxb-[0-9]+-[0-9]+-[A-Za-z0-9]+"          # Slack bot tokens
          "ghp_[A-Za-z0-9]{36}"                       # GitHub personal access tokens
          "gho_[A-Za-z0-9]{36}"                       # GitHub OAuth tokens
          "github_pat_[A-Za-z0-9_]{82}"               # GitHub fine-grained tokens
          "glpat-[A-Za-z0-9_-]{20}"                   # GitLab personal access tokens
          "AKIA[0-9A-Z]{16}"                          # AWS access keys
          "[0-9]+-[a-zA-Z0-9]+\.apps\.googleusercontent\.com"  # OAuth client IDs
          "postgres://.*:.*@"                         # Database URLs with credentials
          "mysql://.*:.*@"                            # MySQL URLs with credentials
          "mongodb://.*:.*@"                          # MongoDB URLs with credentials
        )
        
        SECRETS_FOUND=false
        
        for pattern in "${PATTERNS[@]}"; do
          # Skip scanning this security workflow file itself
          SCAN_RESULTS=$(grep -r -E "$pattern" . --exclude-dir=.git --exclude-dir=node_modules 2>/dev/null | grep -v "security-check.yml")
          if [ -n "$SCAN_RESULTS" ]; then
            echo "‚ùå CRITICAL: API key or secret pattern detected: $pattern"
            echo "   Details: $SCAN_RESULTS"
            SECRETS_FOUND=true
          fi
        done
        
        if [ "$SECRETS_FOUND" = true ]; then
          echo ""
          echo "üö® SECURITY VIOLATION: Secrets detected in repository"
          echo "üìã Actions required:"
          echo "   1. Remove sensitive data from files"
          echo "   2. Rotate any exposed credentials immediately"
          echo "   3. Add patterns to .gitignore"
          echo "   4. Use environment variables or secure vaults instead"
          exit 1
        fi
        
        echo "‚úÖ No API keys or secrets detected"
    
    - name: Validate .gitignore coverage
      run: |
        echo "üîç Validating .gitignore coverage..."
        
        REQUIRED_PATTERNS=(
          ".env*"
          "GoogleService-Info.plist"
          "*.key"
          "secrets.*"
          "credentials.*"
        )
        
        MISSING_PATTERNS=()
        
        for pattern in "${REQUIRED_PATTERNS[@]}"; do
          if ! grep -q "$pattern" .gitignore 2>/dev/null; then
            MISSING_PATTERNS+=("$pattern")
          fi
        done
        
        if [ ${#MISSING_PATTERNS[@]} -gt 0 ]; then
          echo "‚ö†Ô∏è Missing .gitignore patterns:"
          printf '   - %s\n' "${MISSING_PATTERNS[@]}"
          echo "These patterns should be added to prevent accidental commits"
          exit 1
        fi
        
        echo "‚úÖ .gitignore coverage validated"
    
    - name: Check for placeholder values
      run: |
        echo "üîç Checking for exposed real values in code..."
        
        # Check Info.plist for real OAuth client ID
        if grep -q "com\.googleusercontent\.apps\." FeedTracker/Info.plist 2>/dev/null; then
          echo "‚ùå Real OAuth client ID detected in Info.plist"
          echo "   Should be: YOUR_OAUTH_CLIENT_ID_HERE"
          exit 1
        fi
        
        # Check SettingsView.swift for real spreadsheet ID
        if grep -q '@AppStorage("spreadsheetId") private var spreadsheetId = "[^"]\+"' FeedTracker/SettingsView.swift 2>/dev/null; then
          SHEET_ID=$(grep -o 'spreadsheetId = "[^"]*"' FeedTracker/SettingsView.swift | sed 's/spreadsheetId = "\(.*\)"/\1/')
          if [ -n "$SHEET_ID" ] && [ "$SHEET_ID" != "" ]; then
            echo "‚ùå Real spreadsheet ID detected in SettingsView.swift"
            echo "   Should be empty string for public commits"
            exit 1
          fi
        fi
        
        echo "‚úÖ No exposed real values found"
    
    - name: Secrets scan summary
      run: |
        echo ""
        echo "üõ°Ô∏è Secrets scan completed successfully"
        echo "‚úÖ Repository is safe for public distribution"
        echo ""
        echo "üîí Protected against:"
        echo "   ‚Ä¢ Environment files (.env*)"
        echo "   ‚Ä¢ OAuth configuration (GoogleService-Info.plist)"
        echo "   ‚Ä¢ API keys (Google, AWS, GitHub, OpenAI, etc.)"
        echo "   ‚Ä¢ Database credentials"
        echo "   ‚Ä¢ Development secrets in code"